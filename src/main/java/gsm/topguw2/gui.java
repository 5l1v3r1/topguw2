/*
 *Feuille de route : il reste à faire : 
************************************ 24 fev ************************************
- Toutes la parties de retro ingéniring -> créer un boutton unique pour trouver keystream ? --> rapidité pour finir l'app !!!
- Partie de scan et de sniffing à bien étudier (quite à y revenir dessus), s'assurer de la cohérence de ce qui a été fait
  et faire ce qui doit etre fait (snif par fréquence notamment)
- Réfléchir succintement au hopping de channel via l'intégration de GR-GSM
- Ajouter les tour gsm dans sniff a cell (trouver moyen de les identifier, par ARFCN ou Freq)
 */
package gsm.topguw2;

import gsm.topguw.conf.RtlsdrConf;
import gsm.topguw.err.RtlsdrError;
import gsm.topguw.generality.Cell;
import gsm.topguw.tools.Scanner;
import gsm.topguw2.utils.Utils;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/**
 *
 * @author root
 */
public class gui extends javax.swing.JFrame {

    /**
     * VARIABLES
     */
    
    // rtl sdr configuration
    private RtlsdrConf conf = new RtlsdrConf();

    // cells founded in the current use of the program
    private ArrayList<Cell> cells;
    
    // workspace
    private File workspace;

    /**
     * Creates new form gui
     */
    public gui() {
        // workspace location : default = current dir
        workspace = new File(System.getProperty("user.dir"));
        
        /** ------------- initialise all components ------------------- **/
        initComponents();
        // TODO : delete this instanciation
        Utils utility = new Utils();
        // populate the gsm type combobox
        for (String s : Cell.BANDS) {
            gsmtype.addItem(s);
        }
        // ensure linebreak on error textarea
        errorinformation.setWrapStyleWord(true);
        errorinformation.setLineWrap(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutDial = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoabout = new javax.swing.JTextPane();
        closeabout = new javax.swing.JButton();
        configDial = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        saveconf = new javax.swing.JButton();
        samplerateconf = new javax.swing.JFormattedTextField();
        ppmconf = new javax.swing.JFormattedTextField();
        gainconf = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        setWorkspace = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        currentWorkspaceLbl = new javax.swing.JLabel();
        errorDial = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorinformation = new javax.swing.JTextArea();
        closerrordialog = new javax.swing.JButton();
        configScanDial = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        gsmtype = new javax.swing.JComboBox<>();
        configurationfromscan = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        startscan = new javax.swing.JButton();
        performingScan = new javax.swing.JLabel();
        workspaceLocation = new javax.swing.JFileChooser();
        sniffcellDial = new javax.swing.JDialog();
        jLabel12 = new javax.swing.JLabel();
        cellsForSniffing = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        btnconf2 = new javax.swing.JButton();
        startSniffing = new javax.swing.JButton();
        scancells = new javax.swing.JButton();
        sniffcell = new javax.swing.JButton();
        snifffreq = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnabout = new javax.swing.JButton();
        btnconfig = new javax.swing.JButton();

        aboutDial.setTitle("About Topguw");
        aboutDial.setLocation(new java.awt.Point(0, 0));
        aboutDial.setMinimumSize(new java.awt.Dimension(430, 471));
        aboutDial.setModal(true);
        aboutDial.setResizable(false);

        infoabout.setEditable(false);
        infoabout.setBackground(new java.awt.Color(238, 238, 238));
        infoabout.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        infoabout.setContentType("text/html"); // NOI18N
        infoabout.setText("<html>   <head> \t   </head>   <body>     <p style=\"margin:15px;text-align:justify;\">       Topguw is an application that provide GSM datas analysis to try a known-plaintext attack vector on GSM. Topguw uses topguw_api that uses GR-GSM to ensure a good retro-engineering and a flexible work.<br/> </p> \t<br/><br/> <p style=\"margin:2px;\">       <b>Version : 2.0-beta</b><br/>       <b>Author : Enjalbert Bastien (bastien.enjalbert AT gmail.com)</b> </p>         </body> </html> ");
        infoabout.setAutoscrolls(false);
        infoabout.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(infoabout);

        closeabout.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        closeabout.setText("Close");
        closeabout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeaboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aboutDialLayout = new javax.swing.GroupLayout(aboutDial.getContentPane());
        aboutDial.getContentPane().setLayout(aboutDialLayout);
        aboutDialLayout.setHorizontalGroup(
            aboutDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutDialLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(aboutDialLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeabout)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        aboutDialLayout.setVerticalGroup(
            aboutDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(closeabout)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        configDial.setTitle("Configuration");
        configDial.setMinimumSize(new java.awt.Dimension(378, 310));
        configDial.setModal(true);

        jLabel4.setText("PPM");

        jLabel5.setText("Samplerate");

        jLabel6.setText("Gain");

        saveconf.setText("Save");
        saveconf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveconfActionPerformed(evt);
            }
        });

        samplerateconf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        ppmconf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        gainconf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("RTL-SDR Configuration");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel9.setText("Workspace");

        jLabel10.setText("Location");

        setWorkspace.setText("Set directory");
        setWorkspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setWorkspaceActionPerformed(evt);
            }
        });

        jLabel11.setText("Current : ");

        currentWorkspaceLbl.setText(workspace.toString());

        javax.swing.GroupLayout configDialLayout = new javax.swing.GroupLayout(configDial.getContentPane());
        configDial.getContentPane().setLayout(configDialLayout);
        configDialLayout.setHorizontalGroup(
            configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configDialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configDialLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveconf))
                    .addGroup(configDialLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ppmconf, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configDialLayout.createSequentialGroup()
                        .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel10))
                        .addGap(113, 113, 113)
                        .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gainconf)
                            .addComponent(samplerateconf)
                            .addComponent(setWorkspace, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)))
                    .addGroup(configDialLayout.createSequentialGroup()
                        .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9)
                            .addGroup(configDialLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currentWorkspaceLbl)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        configDialLayout.setVerticalGroup(
            configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configDialLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ppmconf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(gainconf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(samplerateconf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(setWorkspace))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(configDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(currentWorkspaceLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(saveconf)
                .addContainerGap())
        );

        errorDial.setTitle("An error occured");
        errorDial.setMinimumSize(new java.awt.Dimension(500, 300));
        errorDial.setModal(true);

        errorinformation.setColumns(20);
        errorinformation.setRows(5);
        jScrollPane2.setViewportView(errorinformation);

        closerrordialog.setText("Close");
        closerrordialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closerrordialogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout errorDialLayout = new javax.swing.GroupLayout(errorDial.getContentPane());
        errorDial.getContentPane().setLayout(errorDialLayout);
        errorDialLayout.setHorizontalGroup(
            errorDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorDialLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(errorDialLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closerrordialog)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        errorDialLayout.setVerticalGroup(
            errorDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorDialLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(closerrordialog)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        configScanDial.setTitle("Give some informations before scanning");
        configScanDial.setMinimumSize(new java.awt.Dimension(455, 304));
        configScanDial.setModal(true);
        configScanDial.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setText("GSM type");
        configScanDial.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        gsmtype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gsmtypeActionPerformed(evt);
            }
        });
        configScanDial.getContentPane().add(gsmtype, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 145, -1));

        configurationfromscan.setText("Configuration");
        configurationfromscan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurationfromscanActionPerformed(evt);
            }
        });
        configScanDial.getContentPane().add(configurationfromscan, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 145, -1));

        jLabel8.setText("RTL-SDR Device");
        configScanDial.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        startscan.setText("Scan now");
        startscan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startscanActionPerformed(evt);
            }
        });
        configScanDial.getContentPane().add(startscan, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, -1, -1));

        performingScan.setIcon(new javax.swing.ImageIcon("/root/Bureau/temp/oader_blue_512.gif")); // NOI18N
        performingScan.setText("Performing the scan, please wait ");
        performingScan.setVisible(false);
        configScanDial.getContentPane().add(performingScan, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        workspaceLocation.setBackground(java.awt.Color.lightGray);
        workspaceLocation.setDialogTitle("Choose your workspace");
        workspaceLocation.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        workspaceLocation.setVisible(false);

        sniffcellDial.setTitle("Sniff a cell");
        sniffcellDial.setMinimumSize(new java.awt.Dimension(400, 300));

        jLabel12.setText("Select the cell");

        cellsForSniffing.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cellsForSniffing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cellsForSniffingActionPerformed(evt);
            }
        });

        jLabel13.setText("RTL-SDR Conf");

        btnconf2.setText("Configuration");
        btnconf2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconf2ActionPerformed(evt);
            }
        });

        startSniffing.setText("Sniff");
        startSniffing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSniffingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sniffcellDialLayout = new javax.swing.GroupLayout(sniffcellDial.getContentPane());
        sniffcellDial.getContentPane().setLayout(sniffcellDialLayout);
        sniffcellDialLayout.setHorizontalGroup(
            sniffcellDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sniffcellDialLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(sniffcellDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12))
                .addGap(90, 90, 90)
                .addGroup(sniffcellDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnconf2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cellsForSniffing, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sniffcellDialLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(startSniffing)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        sniffcellDialLayout.setVerticalGroup(
            sniffcellDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sniffcellDialLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(sniffcellDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cellsForSniffing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(sniffcellDialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(btnconf2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(startSniffing)
                .addGap(36, 36, 36))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Topguw v2");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        scancells.setText("Scan for cells");
        scancells.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scancellsActionPerformed(evt);
            }
        });

        sniffcell.setText("Sniff a cell");
        sniffcell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sniffcellActionPerformed(evt);
            }
        });

        snifffreq.setText("Sniff a frequency");
        snifffreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snifffreqActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lato Black", 0, 60)); // NOI18N
        jLabel1.setText("TopGuw");

        jLabel2.setText("Advanced tool for GSM");

        btnabout.setText("About");
        btnabout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaboutActionPerformed(evt);
            }
        });

        btnconfig.setText("Configuration");
        btnconfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scancells)
                        .addGap(18, 18, 18)
                        .addComponent(sniffcell)
                        .addGap(18, 18, 18)
                        .addComponent(snifffreq)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 312, Short.MAX_VALUE)
                        .addComponent(btnconfig)
                        .addGap(32, 32, 32)
                        .addComponent(btnabout)
                        .addGap(34, 34, 34))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel2)))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scancells)
                    .addComponent(sniffcell)
                    .addComponent(snifffreq)
                    .addComponent(btnabout)
                    .addComponent(btnconfig))
                .addContainerGap(648, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void snifffreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snifffreqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_snifffreqActionPerformed

    private void btnaboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaboutActionPerformed
        aboutDial.setVisible(true);
    }//GEN-LAST:event_btnaboutActionPerformed

    private void closeaboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeaboutActionPerformed
        aboutDial.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_closeaboutActionPerformed

    private void saveconfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveconfActionPerformed
        if (ppmconf.getText() != null && ppmconf.getText().length() > 0) {
            conf.setPpm(Integer.parseInt(ppmconf.getText()));
        }
        if (samplerateconf.getText() != null && samplerateconf.getText().length() > 0) {
            conf.setPpm(Integer.parseInt(samplerateconf.getText()));
        }
        if (gainconf.getText() != null && gainconf.getText().length() > 0) {
            conf.setPpm(Integer.parseInt(gainconf.getText()));
        }
        configDial.setVisible(false);
    }//GEN-LAST:event_saveconfActionPerformed

    private void scancellsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scancellsActionPerformed
        // show configuration options available for the user
        configScanDial.setVisible(true);
    }//GEN-LAST:event_scancellsActionPerformed

    private void btnconfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconfigActionPerformed
        // open configuration
        configDial.setVisible(true);
    }//GEN-LAST:event_btnconfigActionPerformed

    private void closerrordialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closerrordialogActionPerformed
        errorDial.setVisible(false);
        // erase the error for the .. next
        errorinformation.setText("");
    }//GEN-LAST:event_closerrordialogActionPerformed

    private void startscanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startscanActionPerformed
        
        startscan.setVisible(false);
        // show scan options
        performingScan.setVisible(true);
        try {
            // launch the scan
            cells = Scanner.getGsmCells(gsmtype.getSelectedItem().toString(), conf);
            if(cells.isEmpty()) {
                performingScan.setText("Scan is finished but no cell have been found.\n Maybe you should increase gain.");
            } else {
                performingScan.setText("Scan is finished, founded cells have been register.\n You can close this windows.");
            }
            performingScan.setIcon(null);
        } catch (IOException | RtlsdrError e) {
            errorinformation.setText(e.getMessage());
            errorDial.setVisible(true);
            performingScan.setText("Scan have failed.");
            performingScan.setIcon(null);
            startscan.setVisible(true);
        }

    }//GEN-LAST:event_startscanActionPerformed

    private void configurationfromscanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurationfromscanActionPerformed
        configDial.setVisible(true);
    }//GEN-LAST:event_configurationfromscanActionPerformed

    private void gsmtypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gsmtypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gsmtypeActionPerformed

    private void sniffcellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sniffcellActionPerformed
        if (cells == null || cells.isEmpty()) {
            errorinformation.setText("There is no cells found. Please scan cells to find at least one before sniffing.");
            errorDial.setVisible(true);
        } else {
            
        }
    }//GEN-LAST:event_sniffcellActionPerformed

    private void setWorkspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setWorkspaceActionPerformed
        workspaceLocation.setVisible(true);
        int result = workspaceLocation.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            workspace = new File(workspaceLocation.getSelectedFile().getAbsolutePath());
        } 
        currentWorkspaceLbl.setText(workspace.toString());
    }//GEN-LAST:event_setWorkspaceActionPerformed

    private void btnconf2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconf2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnconf2ActionPerformed

    private void startSniffingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSniffingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startSniffingActionPerformed

    private void cellsForSniffingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cellsForSniffingActionPerformed
        // populate the gsm type combobox
        for (String s : Cell.BANDS) {
            gsmtype.addItem(s);
        }
    }//GEN-LAST:event_cellsForSniffingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog aboutDial;
    private javax.swing.JButton btnabout;
    private javax.swing.JButton btnconf2;
    private javax.swing.JButton btnconfig;
    private javax.swing.JComboBox<String> cellsForSniffing;
    private javax.swing.JButton closeabout;
    private javax.swing.JButton closerrordialog;
    private javax.swing.JDialog configDial;
    private javax.swing.JDialog configScanDial;
    private javax.swing.JButton configurationfromscan;
    private javax.swing.JLabel currentWorkspaceLbl;
    private javax.swing.JDialog errorDial;
    private javax.swing.JTextArea errorinformation;
    private javax.swing.JFormattedTextField gainconf;
    private javax.swing.JComboBox<String> gsmtype;
    private javax.swing.JTextPane infoabout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel performingScan;
    private javax.swing.JFormattedTextField ppmconf;
    private javax.swing.JFormattedTextField samplerateconf;
    private javax.swing.JButton saveconf;
    private javax.swing.JButton scancells;
    private javax.swing.JButton setWorkspace;
    private javax.swing.JButton sniffcell;
    private javax.swing.JDialog sniffcellDial;
    private javax.swing.JButton snifffreq;
    private javax.swing.JButton startSniffing;
    private javax.swing.JButton startscan;
    private javax.swing.JFileChooser workspaceLocation;
    // End of variables declaration//GEN-END:variables
}
